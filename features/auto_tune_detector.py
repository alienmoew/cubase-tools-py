import time
import cv2
import numpy as np
import pyautogui

import config
from features.base_feature import BaseFeature
from utils.helpers import ImageHelper, MessageHelper, ConfigHelper, MouseHelper
from utils.process_finder import CubaseProcessFinder
from utils.window_manager import WindowManager


class AutoTuneDetector(BaseFeature):
    """Base class cho t·∫•t c·∫£ Auto-Tune detector features."""

    def __init__(self, feature_name, template_filename, config_prefix):
        """
        Args:
            feature_name: T√™n hi·ªÉn th·ªã c·ªßa feature (v√≠ d·ª•: "Return Speed")
            template_filename: T√™n file template (v√≠ d·ª•: "return_speed_template.png")
            config_prefix: Prefix trong config file (v√≠ d·ª•: "return_speed")
        """
        super().__init__()
        self.feature_name = feature_name
        self.template_path = f"templates/{template_filename}"
        self.config_prefix = config_prefix
        
        # Load gi√° tr·ªã m·∫∑c ƒë·ªãnh t·ª´ config
        self.default_values = ConfigHelper.load_default_values()
        self.current_value = self.default_values.get(f'{config_prefix}_default', 0)
        
        # L·∫•y range values t·ª´ config
        self.min_value = self.default_values.get(f'{config_prefix}_min', 0)
        self.max_value = self.default_values.get(f'{config_prefix}_max', 100)
        self.default_value = self.default_values.get(f'{config_prefix}_default', 0)

    def get_name(self):
        return f"Ch·ªânh {self.feature_name}"

    def get_current_value(self):
        """L·∫•y gi√° tr·ªã hi·ªán t·∫°i."""
        return self.current_value

    def reset_value(self):
        """Reset gi√° tr·ªã v·ªÅ m·∫∑c ƒë·ªãnh (ch·ªâ counter)."""
        self.current_value = self.default_value
        print(f"üîÑ {self.feature_name} value reset to {self.default_value}")

    def set_value(self, value):
        """Set gi√° tr·ªã c·ª• th·ªÉ."""
        self.current_value = value
        print(f"üî¢ {self.feature_name} value set to: {self.current_value}")

    def validate_range(self, value):
        """Validate gi√° tr·ªã trong range cho ph√©p."""
        if value < self.min_value or value > self.max_value:
            print(f"‚ùå Gi√° tr·ªã {value} n·∫±m ngo√†i kho·∫£ng cho ph√©p ({self.min_value}-{self.max_value})")
            return False
        return True

    def _find_cubase_process(self):
        """T√¨m ti·∫øn tr√¨nh Cubase."""
        proc = CubaseProcessFinder.find()
        if not proc:
            print("‚ùå Kh√¥ng t√¨m th·∫•y ti·∫øn tr√¨nh Cubase!")
            MessageHelper.show_error(
                "L·ªói Cubase", 
                f"Kh√¥ng t√¨m th·∫•y ti·∫øn tr√¨nh Cubase!\n\nVui l√≤ng:\n‚Ä¢ M·ªü Cubase tr∆∞·ªõc khi s·ª≠ d·ª•ng\n‚Ä¢ ƒê·∫£m b·∫£o Cubase ƒëang ch·∫°y"
            )
        return proc

    def _focus_cubase_window(self, proc):
        """Focus c·ª≠a s·ªï Cubase v√† t√¨m plugin window."""
        # 1. Focus Cubase process
        hwnd = WindowManager.focus_window_by_pid(proc.info["pid"])
        if not hwnd:
            print("‚ùå Kh√¥ng th·ªÉ focus c·ª≠a s·ªï Cubase!")
            MessageHelper.show_error(
                "L·ªói Focus Window", 
                "Kh√¥ng th·ªÉ focus c·ª≠a s·ªï Cubase!"
            )
            return None
        
        time.sleep(0.3)
        
        # 2. T√¨m c·ª≠a s·ªï AUTO-TUNE PRO
        plugin_win = WindowManager.find_window("AUTO-TUNE PRO")
        if not plugin_win:
            print("‚ùå Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï AUTO-TUNE PRO!")
            MessageHelper.show_error(
                "L·ªói Plugin", 
                "Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï AUTO-TUNE PRO!\n\nVui l√≤ng:\n‚Ä¢ M·ªü plugin AUTO-TUNE PRO trong Cubase\n‚Ä¢ ƒê·∫£m b·∫£o c·ª≠a s·ªï plugin ƒëang hi·ªÉn th·ªã"
            )
            return None

        # 3. Activate plugin window
        plugin_win.activate()
        time.sleep(0.3)
        return plugin_win

    def _find_template_match(self, plugin_win):
        """T√¨m template match trong c·ª≠a s·ªï plugin."""
        # Ch·ª•p ·∫£nh m√†n h√¨nh v√πng plugin
        x, y, w, h = plugin_win.left, plugin_win.top, plugin_win.width, plugin_win.height
        screenshot = pyautogui.screenshot(region=(x, y, w, h))
        screenshot_np = np.array(screenshot)
        screenshot_gray = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2GRAY)

        # Load template
        template = cv2.imread(self.template_path, cv2.IMREAD_GRAYSCALE)
        if template is None:
            print(f"‚ùå Kh√¥ng th·ªÉ load template: {self.template_path}")
            return None, 0

        # Template matching
        result = cv2.matchTemplate(screenshot_gray, template, cv2.TM_CCOEFF_NORMED)
        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)

        print(f"üîç {self.feature_name} Template matching confidence: {max_val:.2f}")

        if max_val < config.TEMPLATE_MATCH_THRESHOLD:
            print(f"‚ùå Template not found for {self.feature_name.lower()}. Confidence: {max_val:.2f}")
            return None, max_val

        # T√≠nh to√°n v·ªã tr√≠ click (90% t·ª´ top c·ªßa template)
        template_height = template.shape[0]
        click_x = x + max_loc[0] + template.shape[1] // 2
        click_y = y + max_loc[1] + int(template_height * 0.9)

        print(f"‚úÖ Template found for {self.feature_name.lower()} with confidence: {max_val:.2f}")
        print(f"üéØ {self.feature_name} click position: ({click_x}, {click_y})")

        return (click_x, click_y), max_val

    def _process_value_input(self, click_pos, value):
        """X·ª≠ l√Ω vi·ªác click v√† nh·∫≠p gi√° tr·ªã."""
        try:
            click_x, click_y = click_pos

            # Click v√†o v·ªã tr√≠ template
            MouseHelper.safe_click(click_x, click_y, delay=0.2)
            
            # Select all v√† nh·∫≠p gi√° tr·ªã m·ªõi
            time.sleep(0.1)
            pyautogui.hotkey('ctrl', 'a')
            time.sleep(0.1)
            pyautogui.typewrite(str(value))
            time.sleep(0.1)
            pyautogui.press('enter')

            print(f"üîÑ {self.feature_name}: Entered {value} and pressed Enter")
            return True

        except Exception as e:
            print(f"‚ùå Error in {self.feature_name.lower()} input process: {e}")
            return False

    def set_auto_tune_value(self, value):
        """Method chung ƒë·ªÉ set gi√° tr·ªã trong AUTO-TUNE plugin."""
        if not self.validate_range(value):
            return False

        print(f"üéõÔ∏è Setting {self.feature_name} to: {value}")

        try:
            # 1. T√¨m Cubase process
            proc = self._find_cubase_process()
            if not proc:
                return False

            # 2. Focus Cubase window
            plugin_win = self._focus_cubase_window(proc)
            if not plugin_win:
                return False

            # 3. T√¨m template v√† click
            click_pos, confidence = self._find_template_match(plugin_win)
            if not click_pos:
                return False

            # 4. X·ª≠ l√Ω input
            success = self._process_value_input(click_pos, value)
            if success:
                self.set_value(value)
                return True

            return False

        except Exception as e:
            print(f"‚ùå Error in {self.feature_name.lower()} process: {e}")
            return False

    def reset_to_default(self):
        """Reset v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh t·ª´ config."""
        return self.set_auto_tune_value(self.default_value)

    def execute(self):
        """Th·ª±c thi ch·ª©c nƒÉng (legacy method)."""
        return self.set_auto_tune_value(self.current_value)