from abc import ABC, abstractmethod
import os
import config

class BaseFeature(ABC):
    """Base class cho t·∫•t c·∫£ c√°c t√≠nh nƒÉng."""
    
    def __init__(self):
        self.ensure_directories()
    
    def ensure_directories(self):
        """T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt."""
        try:
            print(f"üîß Ensuring directories...")
            print(f"   RESULT_DIR: {config.RESULT_DIR}")
            print(f"   DATA_DIR: {config.DATA_DIR}")
            
            os.makedirs(config.RESULT_DIR, exist_ok=True)
            os.makedirs(config.DATA_DIR, exist_ok=True)
            
            print(f"‚úÖ Directories ensured successfully")
        except Exception as e:
            print(f"‚ö†Ô∏è Error ensuring directories: {e}")
    
    @abstractmethod
    def execute(self):
        """Th·ª±c thi t√≠nh nƒÉng ch√≠nh."""
        pass
    
    @abstractmethod
    def get_name(self):
        """Tr·∫£ v·ªÅ t√™n c·ªßa t√≠nh nƒÉng."""
        pass