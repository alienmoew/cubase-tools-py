from features.auto_tune_detector import AutoTuneDetector
import pyautogui
import time


class SoundShifterDetector(AutoTuneDetector):
    """T√≠nh nƒÉng N√¢ng/H·∫° Tone v·ªõi SoundShifter Pitch Stereo plugin."""

    def __init__(self):
        super().__init__(
            feature_name="SoundShifter Pitch",
            template_filename="soundshifter_pitch_template.png",
            config_prefix="soundshifter_pitch"
        )
        self.plugin_name = "SoundShifter Pitch Stereo"
        self.current_value = 0  # Gi√° tr·ªã hi·ªán t·∫°i (-4 to +4)
        
    def raise_tone(self, num_tones=1):
        """N√¢ng tone l√™n (m·ªói tone = +2)."""
        target_value = self.current_value + (num_tones * 2)
        return self.set_pitch_value(target_value)
    
    def lower_tone(self, num_tones=1):
        """H·∫° tone xu·ªëng (m·ªói tone = -2)."""
        target_value = self.current_value - (num_tones * 2)
        return self.set_pitch_value(target_value)
    
    def set_pitch_value(self, value):
        """ƒê·∫∑t gi√° tr·ªã pitch cho SoundShifter."""
        if not self.validate_range(value):
            print(f"‚ùå Gi√° tr·ªã {value} v∆∞·ª£t qu√° gi·ªõi h·∫°n [{self.min_value}, {self.max_value}]")
            return False
            
        print(f"üéµ Setting SoundShifter pitch to: {value}")
        
        try:
            # 1. T√¨m Cubase process
            proc = self._find_cubase_process()
            if not proc:
                return False

            # 2. Focus Cubase window v√† t√¨m plugin
            plugin_win = self._focus_cubase_window(proc)
            if not plugin_win:
                return False

            # 3. T√¨m template v√† double-click
            click_pos, confidence = self._find_template_match(plugin_win)
            if not click_pos:
                return False

            # 4. Double-click ƒë·ªÉ m·ªü input field
            success = self._double_click_input_field(click_pos)
            if not success:
                return False

            # 5. Input gi√° tr·ªã m·ªõi
            success = self._input_pitch_value(value)
            if success:
                self.current_value = value
                print(f"‚úÖ SoundShifter pitch set to {value}")
                return True

            return False

        except Exception as e:
            print(f"‚ùå Error setting SoundShifter pitch: {e}")
            return False
    
    def _double_click_input_field(self, click_pos):
        """Double-click v√†o input field ƒë·ªÉ activate editing."""
        try:
            from utils.helpers import MouseHelper
            
            click_x, click_y = click_pos

            # Double-click v√†o input field
            MouseHelper.safe_double_click(click_x, click_y, delay=0.2)
            
            print(f"üñ±Ô∏è Double-clicked input field at ({click_x}, {click_y})")
            return True

        except Exception as e:
            print(f"‚ùå Error double-clicking input field: {e}")
            return False
    
    def _input_pitch_value(self, value):
        """Nh·∫≠p gi√° tr·ªã pitch v√†o field ƒë√£ ƒë∆∞·ª£c activate."""
        try:
            # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ field activate
            time.sleep(0.3)
            
            # Clear field hi·ªán t·∫°i (Ctrl+A ƒë·ªÉ select all)
            pyautogui.hotkey('ctrl', 'a')
            time.sleep(0.1)
            
            # Type gi√° tr·ªã m·ªõi
            pyautogui.typewrite(str(value))
            time.sleep(0.2)
            
            # Press Enter ƒë·ªÉ confirm
            pyautogui.press('enter')
            
            print(f"‚å®Ô∏è Typed pitch value: {value}")
            return True

        except Exception as e:
            print(f"‚ùå Error inputting pitch value: {e}")
            return False
    
    def get_tone_description(self, value):
        """L·∫•y m√¥ t·∫£ tone d·ª±a tr√™n gi√° tr·ªã."""
        if value == 0:
            return "B√¨nh th∆∞·ªùng"
        elif value > 0:
            tones = value // 2
            remainder = value % 2
            if remainder == 0:
                return f"+{tones} tone"
            else:
                if tones == 0:
                    return f"+{remainder}/2 tone"
                else:
                    return f"+{tones} tone +{remainder}/2"
        else:
            abs_val = abs(value)
            tones = abs_val // 2
            remainder = abs_val % 2
            if remainder == 0:
                return f"-{tones} tone"
            else:
                if tones == 0:
                    return f"-{remainder}/2 tone"
                else:
                    return f"-{tones} tone -{remainder}/2"
    
    def reset_pitch(self):
        """Reset pitch v·ªÅ 0."""
        return self.set_pitch_value(0)
    
    def _focus_cubase_window(self, proc):
        """Override ƒë·ªÉ t√¨m SoundShifter plugin thay v√¨ AUTO-TUNE PRO."""
        from utils.window_manager import WindowManager
        from utils.helpers import MessageHelper
        import time
        
        # 1. Focus Cubase process
        hwnd = WindowManager.focus_window_by_pid(proc.info["pid"])
        if not hwnd:
            print("‚ùå Kh√¥ng th·ªÉ focus c·ª≠a s·ªï Cubase!")
            MessageHelper.show_error(
                "L·ªói Focus Window", 
                "Kh√¥ng th·ªÉ focus c·ª≠a s·ªï Cubase!"
            )
            return None
        
        time.sleep(0.3)
        
        # 2. T√¨m c·ª≠a s·ªï SoundShifter Pitch Stereo
        plugin_win = WindowManager.find_window("SoundShifter Pitch Stereo")
        if not plugin_win:
            print("‚ùå Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï SoundShifter Pitch Stereo!")
            MessageHelper.show_error(
                "L·ªói Plugin Window", 
                f"Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï {self.plugin_name}!\n\nVui l√≤ng:\n‚Ä¢ M·ªü plugin {self.plugin_name} trong Cubase\n‚Ä¢ ƒê·∫£m b·∫£o c·ª≠a s·ªï plugin hi·ªÉn th·ªã tr√™n m√†n h√¨nh"
            )
            return None

        print(f"‚úÖ ƒê√£ t√¨m th·∫•y c·ª≠a s·ªï {self.plugin_name}")
        return plugin_win
    
    def _find_template_match(self, plugin_win):
        """Override ƒë·ªÉ s·ª≠ d·ª•ng v·ªã tr√≠ click 40% t·ª´ tr√™n xu·ªëng."""
        import cv2
        import numpy as np
        import pyautogui
        import config
        
        # Ch·ª•p ·∫£nh m√†n h√¨nh v√πng plugin
        x, y, w, h = plugin_win.left, plugin_win.top, plugin_win.width, plugin_win.height
        screenshot = pyautogui.screenshot(region=(x, y, w, h))
        screenshot_np = np.array(screenshot)
        screenshot_gray = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2GRAY)

        # Load template
        template = cv2.imread(self.template_path, cv2.IMREAD_GRAYSCALE)
        if template is None:
            print(f"‚ùå Kh√¥ng th·ªÉ load template: {self.template_path}")
            return None, 0

        # Template matching
        result = cv2.matchTemplate(screenshot_gray, template, cv2.TM_CCOEFF_NORMED)
        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)

        print(f"üîç {self.feature_name} Template matching confidence: {max_val:.2f}")

        if max_val < config.TEMPLATE_MATCH_THRESHOLD:
            print(f"‚ùå Template not found for {self.feature_name.lower()}. Confidence: {max_val:.2f}")
            return None, max_val

        # T√≠nh to√°n v·ªã tr√≠ click (40% t·ª´ top c·ªßa template) 
        template_height = template.shape[0]
        click_x = x + max_loc[0] + template.shape[1] // 2
        click_y = y + max_loc[1] + int(template_height * 0.4)  # 40% t·ª´ tr√™n xu·ªëng

        print(f"‚úÖ Template found for {self.feature_name.lower()} with confidence: {max_val:.2f}")
        print(f"üéØ {self.feature_name} click position: ({click_x}, {click_y}) - 40% from top")

        return (click_x, click_y), max_val