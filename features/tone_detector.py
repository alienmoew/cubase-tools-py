import re
import time
import threading

import pyautogui

import config
from features.base_feature import BaseFeature
from utils.helpers import OCRHelper, ImageHelper, MessageHelper, MouseHelper
from utils.process_finder import CubaseProcessFinder
from utils.window_manager import WindowManager


class ToneDetector(BaseFeature):
    """T√≠nh nƒÉng d√≤ tone v√† auto-click."""

    def __init__(self):
        super().__init__()
        OCRHelper.setup_tesseract()
        self._detection_lock = threading.Lock()  # Thread safety
        self._manual_active = False  # Flag cho b·∫•t k·ª≥ manual operation n√†o
        self.auto_detect_active = False  # Flag cho auto-detect state
        self.auto_detect_thread = None  # Thread cho auto-detect
        self.tone_callback = None  # Callback ƒë·ªÉ update UI
        self.current_tone_getter = None  # Getter ƒë·ªÉ l·∫•y current tone
    
    def pause_auto_detect(self):
        """T·∫°m d·ª´ng auto-detect cho c√°c ch·ª©c nƒÉng kh√°c."""
        self._manual_active = True
    
    def resume_auto_detect(self):
        """Cho ph√©p auto-detect ti·∫øp t·ª•c sau khi ch·ª©c nƒÉng kh√°c ho√†n th√†nh."""
        self._manual_active = False

    def get_name(self):
        return "D√≤ Tone"
    
    def _calculate_crop_box(self, win_w, win_h):
        """T√≠nh to√°n crop box v·ªõi margin ratio t·ª´ config."""
        margin_ratio = config.CROP_MARGIN_RATIO
        return (
            win_w // margin_ratio,              # x1
            win_h // margin_ratio,              # y1  
            win_w * (margin_ratio - 1) // margin_ratio,  # x2
            win_h * (margin_ratio - 1) // margin_ratio   # y2
        )
    
    def _screenshot_and_crop_plugin(self, plugin_win):
        """Screenshot plugin window v√† crop theo margin."""
        left, top, right, bottom = plugin_win.left, plugin_win.top, plugin_win.right, plugin_win.bottom
        full = pyautogui.screenshot(region=(left, top, right - left, bottom - top))
        
        win_w, win_h = right - left, bottom - top
        crop_box = self._calculate_crop_box(win_w, win_h)
        cropped = full.crop(crop_box)
        
        return cropped, (left, top, crop_box)

    def execute(self, tone_callback=None):
        """Th·ª±c thi t√≠nh nƒÉng d√≤ tone."""
        # Set flag cho manual operation v√† ƒë·ª£i auto release lock
        self._manual_active = True
        
        # ƒê·ª£i ƒë·ªÉ l·∫•y lock (blocking=True ƒë·ªÉ ƒë·ª£i)
        self._detection_lock.acquire()
            
        self.tone_callback = tone_callback
        # 1. T√¨m Cubase process
        proc = CubaseProcessFinder.find()
        if not proc:
            print("‚ùå Kh√¥ng t√¨m th·∫•y ti·∫øn tr√¨nh Cubase!")
            MessageHelper.show_error(
                "L·ªói Cubase", 
                "Kh√¥ng t√¨m th·∫•y ti·∫øn tr√¨nh Cubase!\n\nVui l√≤ng:\n‚Ä¢ M·ªü Cubase tr∆∞·ªõc khi s·ª≠ d·ª•ng\n‚Ä¢ ƒê·∫£m b·∫£o Cubase ƒëang ch·∫°y"
            )
            self._manual_active = False
            self._detection_lock.release()
            return False

        # 2. Focus Cubase
        hwnd = WindowManager.focus_window_by_pid(proc.info["pid"])
        if not hwnd:
            print("‚ùå Kh√¥ng focus ƒë∆∞·ª£c Cubase!")
            MessageHelper.show_error(
                "L·ªói Focus", 
                "Kh√¥ng th·ªÉ focus v√†o c·ª≠a s·ªï Cubase!\n\nTh·ª≠ l·∫°i sau v√†i gi√¢y."
            )
            self._manual_active = False
            self._detection_lock.release()
            return False
        time.sleep(config.FOCUS_DELAY)

        # 3. T√¨m plugin window
        plugin_win = WindowManager.find_window("AUTO-KEY")
        if not plugin_win:
            print("‚ùå Kh√¥ng t√¨m th·∫•y plugin AUTO-KEY!")
            MessageHelper.show_error(
                "L·ªói Plugin AUTO-KEY", 
                "Kh√¥ng t√¨m th·∫•y plugin AUTO-KEY!\n\nVui l√≤ng:\n‚Ä¢ M·ªü plugin AUTO-KEY trong Cubase\n‚Ä¢ ƒê·∫£m b·∫£o c·ª≠a s·ªï plugin hi·ªÉn th·ªã tr√™n m√†n h√¨nh\n‚Ä¢ Ki·ªÉm tra t√™n c·ª≠a s·ªï c√≥ ch·ª©a 'AUTO-KEY'"
            )
            self._manual_active = False
            self._detection_lock.release()
            return False

        plugin_win.activate()
        time.sleep(config.FOCUS_DELAY)

        # 4. Screenshot v√† OCR
        success = self._process_plugin_window(plugin_win)
        
        # Reset flag v√† release lock
        self._manual_active = False
        self._detection_lock.release()
        return success

    def _process_plugin_window(self, plugin_win):
        """X·ª≠ l√Ω c·ª≠a s·ªï plugin."""
        # Screenshot v√† crop
        cropped, (left, top, crop_box) = self._screenshot_and_crop_plugin(plugin_win)

        # OCR
        data_crop = OCRHelper.extract_text_data(cropped)
        words_crop = OCRHelper.get_text_words(data_crop)
        print("üìú OCR text:", words_crop)

        # Tr√≠ch xu·∫•t v√† hi·ªÉn th·ªã tone hi·ªán t·∫°i
        current_tone = self._extract_current_tone(words_crop)
        if current_tone and self.tone_callback:
            self.tone_callback(current_tone)

        # Debug image
        debug_path = ImageHelper.save_debug_image_with_boxes(
            cropped.copy(), data_crop, "plugin_ocr_debug.png"
        )
        print(f"üñº OCR debug image saved -> {debug_path}")

        # T√¨m v√† click tone
        tone_found = self._find_and_click_tone(data_crop, left, top, crop_box)
        if not tone_found:
            return False

        # ƒê·ª£i v√† click Send button
        time.sleep(config.ANALYSIS_DELAY)
        send_clicked = self._find_and_click_send_button(
            data_crop, left, top, crop_box)

        return send_clicked

    def _find_and_click_tone(self, ocr_data, left, top, crop_box):
        """T√¨m v√† click tone (Major/Minor) - ƒë·ª£i khi ƒëang Listening."""
        # ƒê·ª£i cho ƒë·∫øn khi plugin kh√¥ng c√≤n listening
        if self._is_listening(ocr_data):
            print("üéß Plugin ƒëang Listening... ƒê·ª£i cho ƒë·∫øn khi ho√†n t·∫•t...")
            if not self._wait_for_listening_complete():
                print("‚è∞ Timeout waiting for listening to complete")
                return False
        
        for i, txt in enumerate(ocr_data["text"]):
            if txt and txt.strip() in ("Major", "Minor"):
                note = ocr_data["text"][i-1].strip() if i > 0 else ""
                found = f"{note} {txt.strip()}".strip()

                click_x = left + \
                    crop_box[0] + ocr_data["left"][i] + \
                    ocr_data["width"][i] // 2
                click_y = top + \
                    crop_box[1] + ocr_data["top"][i] + \
                    ocr_data["height"][i] // 2

                MouseHelper.safe_click(click_x, click_y)
                print(f"üéπ Click key: {found}")
                return True

        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y 'Major' ho·∫∑c 'Minor'")
        return False
    
    def _is_listening(self, ocr_data):
        """Ki·ªÉm tra xem plugin c√≥ ƒëang ·ªü tr·∫°ng th√°i Listening kh√¥ng."""
        try:
            # Ki·ªÉm tra c√°c t·ª´ trong OCR data
            for txt in ocr_data["text"]:
                if txt and txt.strip():
                    txt_clean = txt.strip().lower()
                    # Ki·ªÉm tra c√°c bi·∫øn th·ªÉ c·ªßa "Listening"
                    if any(keyword in txt_clean for keyword in [
                        "listening", "listen", "analyzing", "processing", 
                        "detecting", "analysis", "wait", "processing..."
                    ]):
                        return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå Error checking listening state: {e}")
            return False
    
    def _wait_for_listening_complete(self, max_wait_time=30, check_interval=1.0):
        """ƒê·ª£i cho ƒë·∫øn khi plugin kh√¥ng c√≤n ·ªü tr·∫°ng th√°i Listening."""
        print("‚è≥ ƒêang ƒë·ª£i plugin ho√†n t·∫•t ph√¢n t√≠ch...")
        start_time = time.time()
        
        while time.time() - start_time < max_wait_time:
            try:
                # T√¨m plugin window
                plugin_win = WindowManager.find_window("AUTO-KEY")
                if not plugin_win:
                    print("‚ùå M·∫•t k·∫øt n·ªëi v·ªõi plugin AUTO-KEY")
                    return False
                
                # Screenshot v√† OCR ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
                left, top, right, bottom = plugin_win.left, plugin_win.top, plugin_win.right, plugin_win.bottom
                full = pyautogui.screenshot(
                    region=(left, top, right - left, bottom - top))
                
                # Crop
                win_w, win_h = right - left, bottom - top
                crop_box = self._calculate_crop_box(win_w, win_h)
                cropped = full.crop(crop_box)
                
                # OCR
                data_crop = OCRHelper.extract_text_data(cropped)
                
                # Ki·ªÉm tra xem c√≤n listening kh√¥ng
                if not self._is_listening(data_crop):
                    elapsed_time = time.time() - start_time
                    print(f"‚úÖ Plugin ƒë√£ ho√†n t·∫•t ph√¢n t√≠ch sau {elapsed_time:.1f}s")
                    return True
                
                # Hi·ªÉn th·ªã progress
                elapsed_time = time.time() - start_time
                print(f"üéß V·∫´n ƒëang ph√¢n t√≠ch... ({elapsed_time:.1f}s)")
                
                # ƒê·ª£i tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
                time.sleep(check_interval)
                
            except Exception as e:
                print(f"‚ùå Error waiting for listening: {e}")
                return False
        
        print(f"‚è∞ Timeout sau {max_wait_time}s - plugin v·∫´n ƒëang ph√¢n t√≠ch")
        return False

    def _find_and_click_send_button(self, ocr_data, left, top, crop_box):
        """T√¨m v√† click n√∫t Send."""
        for i, txt in enumerate(ocr_data["text"]):
            txt_clean = txt.strip() if txt else ""
            if txt_clean.lower() in ("send", "send to auto-tune‚Ñ¢", "auto-tune"):
                click_x = left + \
                    crop_box[0] + ocr_data["left"][i] + \
                    ocr_data["width"][i] // 2
                click_y = top + \
                    crop_box[1] + ocr_data["top"][i] + \
                    ocr_data["height"][i] // 2

                MouseHelper.safe_click(click_x, click_y)
                print(f"‚úÖ Clicked '{txt_clean}' button")
                return True

        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t 'Send to Auto-Tune'")
        return False
    
    def _extract_current_tone(self, words_list):
        """Tr√≠ch xu·∫•t tone hi·ªán t·∫°i t·ª´ danh s√°ch t·ª´ OCR - ch·ªâ l·∫•y Note + Mode."""
        try:
            # T√¨m v·ªã tr√≠ c·ªßa AUTO-KEY v√† Send
            auto_key_index = -1
            send_index = -1
            
            for i, word in enumerate(words_list):
                if "AUTO-KEY" in word.upper():
                    auto_key_index = i
                elif word.upper() in ("SEND", "Send"):
                    send_index = i
                    break
            
            # N·∫øu t√¨m th·∫•y c·∫£ hai markers
            if auto_key_index >= 0 and send_index >= 0 and send_index > auto_key_index:
                # L·∫•y c√°c t·ª´ gi·ªØa AUTO-KEY v√† Send
                tone_words = words_list[auto_key_index + 1:send_index]
                
                # L·ªçc c√°c t·ª´ h·ª£p l·ªá
                if tone_words:
                    # Danh s√°ch c√°c note h·ª£p l·ªá (bao g·ªìm c·∫£ vi·∫øt hoa v√† th∆∞·ªùng)
                    valid_notes = ["C", "C#", "Db", "D", "D#", "Eb", "E", "F", 
                                  "F#", "Gb", "G", "G#", "Ab", "A", "A#", "Bb", "B",
                                  "c", "c#", "db", "d", "d#", "eb", "e", "f",
                                  "f#", "gb", "g", "g#", "ab", "a", "a#", "bb", "b"]
                    
                    # Danh s√°ch c√°c mode h·ª£p l·ªá  
                    valid_modes = ["Major", "Minor", "major", "minor"]
                    
                    note = None
                    mode = None
                    

                    
                    # T√¨m note v√† mode
                    for word in tone_words:
                        word_clean = word.strip()
                        
                        # L√†m s·∫°ch k√Ω t·ª± ƒë·∫∑c bi·ªát aggressive h∆°n
                        word_cleaned = re.sub(r"[^A-Za-z#b]", "", word_clean)  # Ch·ªâ gi·ªØ ch·ªØ c√°i, # v√† b
                        
                        # Ki·ªÉm tra note (gi·ªØ nguy√™n format g·ªëc)
                        if word_cleaned in valid_notes and note is None:
                            note = word_cleaned  # Gi·ªØ nguy√™n nh∆∞ OCR ƒë·ªçc ƒë∆∞·ª£c
                        
                        # Ki·ªÉm tra mode (gi·ªØ nguy√™n format g·ªëc)
                        elif word_cleaned in valid_modes and mode is None:
                            mode = word_cleaned  # Gi·ªØ nguy√™n nh∆∞ OCR ƒë·ªçc ƒë∆∞·ª£c
                    
                    # Tr·∫£ v·ªÅ k·∫øt h·ª£p note + mode
                    if note and mode:
                        return f"{note} {mode}"
                    elif note:  # Ch·ªâ c√≥ note
                        return note
                    elif mode:  # Ch·ªâ c√≥ mode (hi·∫øm khi x·∫£y ra)
                        return mode
            
            return None
            
        except Exception as e:
            print(f"‚ùå Error extracting tone: {e}")
            return None
    
    def start_auto_detect(self, tone_callback=None, current_tone_getter=None):
        """B·∫Øt ƒë·∫ßu auto detect tone."""
        if self.auto_detect_active:
            return
        
        self.tone_callback = tone_callback
        self.current_tone_getter = current_tone_getter
        self.auto_detect_active = True
        
        # T·∫°o thread ƒë·ªÉ ch·∫°y auto detect
        self.auto_detect_thread = threading.Thread(target=self._auto_detect_loop, daemon=True)
        self.auto_detect_thread.start()
        
        print("‚úÖ Auto detect b·∫Øt ƒë·∫ßu ho·∫°t ƒë·ªông")
    
    def stop_auto_detect(self):
        """D·ª´ng auto detect tone."""
        if not self.auto_detect_active:
            return
        
        self.auto_detect_active = False
        if self.auto_detect_thread:
            self.auto_detect_thread.join(timeout=config.THREAD_JOIN_TIMEOUT)
        
        print("‚èπÔ∏è Auto detect ƒë√£ d·ª´ng")
    
    def _auto_detect_loop(self):
        """Loop ch√≠nh c·ªßa auto detect."""
        check_interval = config.AUTO_DETECT_INTERVAL
        
        while self.auto_detect_active:
            try:
                # Ki·ªÉm tra manual operation tr∆∞·ªõc
                if self._manual_active:
                    time.sleep(config.AUTO_DETECT_RESPONSIVE_DELAY)
                    continue
                
                # Ki·ªÉm tra xem c√≥ th·ªÉ l·∫•y lock kh√¥ng
                if not self._detection_lock.acquire(blocking=False):
                    time.sleep(check_interval)
                    continue
                
                try:
                    # Ki·ªÉm tra tone m·ªõi
                    new_tone = self._check_current_tone()
                
                    if new_tone:
                        # L·∫•y tone hi·ªán t·∫°i t·ª´ app
                        current_app_tone = "--"
                        if self.current_tone_getter:
                            current_app_tone = self.current_tone_getter()
                        
                        # So s√°nh tone
                        if new_tone != current_app_tone:
                            print(f"üîÑ Ph√°t hi·ªán tone m·ªõi: {current_app_tone} ‚Üí {new_tone}")
                            
                            # C·∫≠p nh·∫≠t UI
                            if self.tone_callback:
                                self.tone_callback(new_tone)
                            
                            # T·ª± ƒë·ªông g·ª≠i tone m·ªõi
                            self._auto_send_tone()
                    
                    # ƒê·ª£i tr∆∞·ªõc khi ki·ªÉm tra l·∫ßn ti·∫øp theo
                    time.sleep(check_interval)
                
                finally:
                    # Lu√¥n release lock sau khi xong
                    self._detection_lock.release()
                
            except Exception as e:
                print(f"‚ùå Auto detect error: {e}")
                time.sleep(check_interval)
    
    def _check_current_tone(self):
        """Ki·ªÉm tra tone hi·ªán t·∫°i t·ª´ plugin (ch·ªâ OCR, kh√¥ng click)."""
        try:
            # T√¨m plugin window
            plugin_win = WindowManager.find_window("AUTO-KEY")
            if not plugin_win:
                return None
            
            # Screenshot v√† OCR
            left, top, right, bottom = plugin_win.left, plugin_win.top, plugin_win.right, plugin_win.bottom
            full = pyautogui.screenshot(
                region=(left, top, right - left, bottom - top))
            
            # Crop
            win_w, win_h = right - left, bottom - top
            crop_box = self._calculate_crop_box(win_w, win_h)
            cropped = full.crop(crop_box)
            
            # OCR
            data_crop = OCRHelper.extract_text_data(cropped)
            words_crop = OCRHelper.get_text_words(data_crop)
            
            # Tr√≠ch xu·∫•t tone
            return self._extract_current_tone(words_crop)
            
        except Exception as e:
            print(f"‚ùå Error checking current tone: {e}")
            return None
    
    def _auto_send_tone(self):
        """T·ª± ƒë·ªông g·ª≠i tone (ch·ªâ click Send button) - ƒë·ª£i khi ƒëang Listening."""
        try:
            # T√¨m plugin window
            plugin_win = WindowManager.find_window("AUTO-KEY")
            if not plugin_win:
                return False
            
            # Screenshot v√† OCR
            left, top, right, bottom = plugin_win.left, plugin_win.top, plugin_win.right, plugin_win.bottom
            full = pyautogui.screenshot(
                region=(left, top, right - left, bottom - top))
            
            # Crop
            win_w, win_h = right - left, bottom - top
            crop_box = self._calculate_crop_box(win_w, win_h)
            cropped = full.crop(crop_box)
            
            # OCR
            data_crop = OCRHelper.extract_text_data(cropped)
            
            # ƒê·ª£i n·∫øu ƒëang Listening (timeout ng·∫Øn h∆°n cho auto mode)
            if self._is_listening(data_crop):
                print("üéß Auto mode: Plugin ƒëang Listening... ƒê·ª£i...")
                if not self._wait_for_listening_complete(
                    max_wait_time=config.AUTO_DETECT_TIMEOUT_SHORT, 
                    check_interval=config.AUTO_DETECT_RESPONSIVE_DELAY
                ):
                    print("‚è∞ Auto mode timeout - b·ªè qua l·∫ßn n√†y")
                    return False
            
            # T√¨m v√† click Send button
            success = self._find_and_click_send_button(data_crop, left, top, crop_box)
            
            if success:
                print("‚úÖ Auto sent tone successfully")
            
            return success
            
        except Exception as e:
            print(f"‚ùå Error in auto send: {e}")
            return False
