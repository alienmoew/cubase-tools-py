"""
Volume Detector - ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng nh·∫°c tr·ª±c ti·∫øp trong Cubase
"""
import time
import pyautogui
import cv2
import numpy as np

import config
from features.base_feature import BaseFeature
from utils.helpers import ConfigHelper, ImageHelper, TemplateHelper, MessageHelper, MouseHelper
from utils.process_finder import CubaseProcessFinder
from utils.window_manager import WindowManager


class VolumeDetector(BaseFeature):
    """T√≠nh nƒÉng ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng nh·∫°c tr·ª±c ti·∫øp trong Cubase."""
    
    def __init__(self):
        super().__init__()
        
        # Template path
        self.template_path = config.TEMPLATE_PATHS['volume_template']
        
        # Load default values
        default_values = ConfigHelper.load_default_values()
        self.min_value = default_values.get('volume_min', -7)
        self.max_value = default_values.get('volume_max', 0)
        self.default_value = default_values.get('volume_default', -3)
        self.current_value = self.default_value
        
    def get_name(self):
        """Tr·∫£ v·ªÅ t√™n hi·ªÉn th·ªã c·ªßa detector."""
        return "Volume Nh·∫°c"
    
    def validate_range(self, value):
        """Ki·ªÉm tra value c√≥ trong range kh√¥ng."""
        return self.min_value <= value <= self.max_value
    
    def _find_cubase_process(self):
        """T√¨m ti·∫øn tr√¨nh Cubase."""
        proc = CubaseProcessFinder.find()
        if not proc:
            print("‚ùå Kh√¥ng t√¨m th·∫•y ti·∫øn tr√¨nh Cubase!")
            MessageHelper.show_error(
                "L·ªói Cubase", 
                "Kh√¥ng t√¨m th·∫•y ti·∫øn tr√¨nh Cubase!\n\nVui l√≤ng:\n‚Ä¢ M·ªü Cubase tr∆∞·ªõc khi s·ª≠ d·ª•ng\n‚Ä¢ ƒê·∫£m b·∫£o Cubase ƒëang ch·∫°y"
            )
        return proc
    
    def _focus_cubase_window(self, proc):
        """Focus c·ª≠a s·ªï Cubase ch√≠nh."""
        # Focus Cubase process tr∆∞·ªõc
        hwnd = WindowManager.focus_window_by_pid(proc.info["pid"])
        if not hwnd:
            print("‚ùå Kh√¥ng th·ªÉ focus ti·∫øn tr√¨nh Cubase!")
            return None
        
        time.sleep(0.3)
        
        # T√¨m c·ª≠a s·ªï Cubase Pro ch√≠nh
        cubase_window = WindowManager.find_window("Cubase Pro")
        if not cubase_window:
            print("‚ùå Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï 'Cubase Pro'!")
            MessageHelper.show_error(
                "L·ªói Cubase Window", 
                "Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï 'Cubase Pro'!\n\nVui l√≤ng ƒë·∫£m b·∫£o Cubase Pro ƒëang m·ªü v√† hi·ªÉn th·ªã tr√™n m√†n h√¨nh."
            )
            return None
        
        # Activate c·ª≠a s·ªï Cubase Pro
        cubase_window.activate()
        time.sleep(0.5)  # ƒê·ª£i focus ·ªïn ƒë·ªãnh
        
        print(f"‚úÖ Focused Cubase Pro window: {cubase_window.title}")
        
        # Tr·∫£ v·ªÅ handle c·ªßa c·ª≠a s·ªï Cubase Pro ƒë·ªÉ d√πng cho screenshot
        return cubase_window
    
    def _find_template_match(self, cubase_window):
        """T√¨m template match trong Cubase window."""
        try:
            # L·∫•y v√πng Cubase window
            x, y = cubase_window.left, cubase_window.top
            w, h = cubase_window.width, cubase_window.height
            print(f"üìê Cubase Pro window: {x}, {y}, {w}x{h}")
            
            # Ch·ª• ·∫£nh ch·ªâ v√πng Cubase window
            screenshot = pyautogui.screenshot(region=(x, y, w, h))
            screenshot_np = np.array(screenshot)
            screenshot_gray = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2GRAY)
            
            print(f"üìê Cubase Pro screenshot size: {screenshot.width}x{screenshot.height}")
            
            # Load template
            template = cv2.imread(self.template_path, cv2.IMREAD_GRAYSCALE)
            if template is None:
                print(f"‚ùå Kh√¥ng th·ªÉ load template: {self.template_path}")
                return None, 0
            
            template_h, template_w = template.shape[:2]
            print(f"üìê Volume template size: {template_w}x{template_h}")
            
            # Adaptive template matching
            best_result = TemplateHelper.adaptive_template_match(screenshot_gray, template)
            
            print(f"üèÜ Volume best method: {best_result['method']}")
            print(f"üîç Volume confidence: {best_result['confidence']:.3f}")
            print(f"üìè Volume scale: {best_result['scale']:.2f}")
            
            # Save debug image
            debug_filename = "volume_adaptive_debug.png"
            
            if best_result['scale'] != 1.0:
                scaled_w, scaled_h = best_result['template_size']
                debug_template = cv2.resize(template, (scaled_w, scaled_h))
            else:
                debug_template = template
            
            debug_path = ImageHelper.save_template_debug_image(
                screenshot_np, debug_template, best_result['location'], 
                best_result['confidence'], debug_filename
            )
            print(f"üñº Volume adaptive debug saved -> {debug_path}")
            
            if best_result['confidence'] < config.TEMPLATE_MATCH_THRESHOLD:
                print(f"‚ùå Volume template not found. Confidence: {best_result['confidence']:.3f}")
                print(f"üí° Try adjusting Cubase layout or update volume template")
                return None, best_result['confidence']
            
            # T√≠nh to√°n v·ªã tr√≠ click (gi·ªØa template) - chuy·ªÉn ƒë·ªïi t·ª´ relative sang absolute coordinates
            scaled_w, scaled_h = best_result['template_size']
            click_x = x + best_result['location'][0] + scaled_w // 2
            click_y = y + best_result['location'][1] + scaled_h // 2
            
            print(f"‚úÖ Volume template found with confidence: {best_result['confidence']:.3f}")
            print(f"üéØ Volume click position: ({click_x}, {click_y}) [Scale: {best_result['scale']:.2f}]")
            
            return (click_x, click_y), best_result['confidence']
            
        except Exception as e:
            print(f"‚ùå Error finding volume template: {e}")
            return None, 0
    
    def _perform_action(self, click_pos, value):
        """Th·ª±c hi·ªán double click v√† nh·∫≠p gi√° tr·ªã."""
        try:
            click_x, click_y = click_pos
            
            # L∆∞u v·ªã tr√≠ chu·ªôt hi·ªán t·∫°i
            original_x, original_y = pyautogui.position()
            print(f"üíæ Saving mouse position: ({original_x}, {original_y})")
            
            print(f"üîä Setting volume to: {value}")
            
            # Step 1: Double click v√†o gi·ªØa template
            print(f"üëÜ Double clicking volume control: ({click_x}, {click_y})")
            pyautogui.doubleClick(click_x, click_y)
            time.sleep(0.3)
            
            # Step 2: Nh·∫≠p gi√° tr·ªã
            print(f"‚å®Ô∏è Typing value: {value}")
            pyautogui.typewrite(str(value))
            time.sleep(0.1)
            
            # Step 3: Nh·∫•n Enter ƒë·ªÉ x√°c nh·∫≠n
            print("‚Ü©Ô∏è Pressing Enter")
            pyautogui.press('enter')
            time.sleep(0.2)
            
            # Step 4: Tr·∫£ chu·ªôt v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu
            print(f"üîÑ Restoring mouse position to: ({original_x}, {original_y})")
            pyautogui.moveTo(original_x, original_y)
            
            print(f"‚úÖ Volume set to {value} successfully")
            self.current_value = value
            return True
            
        except Exception as e:
            print(f"‚ùå Error setting volume: {e}")
            return False
    
    def set_volume(self, value):
        """ƒê·∫∑t gi√° tr·ªã √¢m l∆∞·ª£ng c·ª• th·ªÉ."""
        # Validate v√† clamp value
        if not self.validate_range(value):
            print(f"‚ö†Ô∏è Volume value {value} out of range [{self.min_value}, {self.max_value}]")
            value = max(self.min_value, min(self.max_value, value))
        
        print(f"üîä Volume Detector - Setting volume to: {value}")
        
        # 1. Find v√† focus Cubase process
        proc = self._find_cubase_process()
        if not proc:
            return False
        
        # 2. Focus Cubase window
        cubase_window = self._focus_cubase_window(proc)
        if not cubase_window:
            return False
        
        # 2.5. Nh·∫•n t·ªï h·ª£p ph√≠m Shift+T tr∆∞·ªõc khi thao t√°c (nhanh)
        print("‚å®Ô∏è Pressing Shift+T...")
        try:
            # Nh·∫•n Shift+T nhanh
            pyautogui.keyDown('shift')
            pyautogui.keyDown('t')
            time.sleep(0.05)  # Gi·ªØ r·∫•t ng·∫Øn
            pyautogui.keyUp('t')
            pyautogui.keyUp('shift')
            time.sleep(0.2)  # ƒê·ª£i ng·∫Øn h∆°n nhi·ªÅu
            print("‚úÖ Shift+T done")
        except Exception as e:
            print(f"‚ùå Hotkey error: {e}")
        
        # 3. Find volume template trong Cubase window
        match_result = self._find_template_match(cubase_window)
        if not match_result or match_result[0] is None:
            return False
        
        click_pos, confidence = match_result
        
        # 4. Perform action
        return self._perform_action(click_pos, value)
    
    def increase_volume(self, step=1):
        """TƒÉng √¢m l∆∞·ª£ng."""
        new_value = min(self.current_value + step, self.max_value)
        return self.set_volume(new_value)
    
    def decrease_volume(self, step=1):
        """Gi·∫£m √¢m l∆∞·ª£ng."""
        new_value = max(self.current_value - step, self.min_value)
        return self.set_volume(new_value)
    
    def reset_to_default(self):
        """Reset v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh."""
        return self.set_volume(self.default_value)
    
    def get_volume_description(self, value):
        """L·∫•y m√¥ t·∫£ cho gi√° tr·ªã √¢m l∆∞·ª£ng."""
        if value >= -1:
            return "R·∫•t to"
        elif value >= -3:
            return "To"
        elif value >= -5:
            return "V·ª´a"
        else:
            return "Nh·ªè"
    
    def toggle_mute(self):
        """Toggle t·∫Øt/b·∫≠t √¢m l∆∞·ª£ng nh·∫°c."""
        print("üîá Toggling music mute...")
        
        # 1. Find v√† focus Cubase process
        proc = self._find_cubase_process()
        if not proc:
            return False
        
        # 2. Focus Cubase window
        cubase_window = self._focus_cubase_window(proc)
        if not cubase_window:
            return False
        
        # 2.5. Nh·∫•n t·ªï h·ª£p ph√≠m Shift+T tr∆∞·ªõc khi thao t√°c (nhanh)
        print("‚å®Ô∏è Pressing Shift+T...")
        try:
            # Nh·∫•n Shift+T nhanh
            pyautogui.keyDown('shift')
            pyautogui.keyDown('t')
            time.sleep(0.05)  # Gi·ªØ r·∫•t ng·∫Øn
            pyautogui.keyUp('t')
            pyautogui.keyUp('shift')
            time.sleep(0.2)  # ƒê·ª£i ng·∫Øn h∆°n nhi·ªÅu
            print("‚úÖ Shift+T done")
        except Exception as e:
            print(f"‚ùå Hotkey error: {e}")
        
        # 3. Find mute template trong Cubase window
        match_result = self._find_mute_template_match(cubase_window)
        if not match_result or match_result[0] is None:
            return False
        
        click_pos, confidence = match_result
        
        # 4. Perform click
        return self._perform_mute_click(click_pos)
    
    def _find_mute_template_match(self, cubase_window):
        """T√¨m mute template match trong Cubase window."""
        try:
            # L·∫•y v√πng Cubase window
            x, y = cubase_window.left, cubase_window.top
            w, h = cubase_window.width, cubase_window.height
            print(f"üìê Cubase Pro window for mute: {x}, {y}, {w}x{h}")
            
            # Ch·ª• ·∫£nh ch·ªâ v√πng Cubase window
            screenshot = pyautogui.screenshot(region=(x, y, w, h))
            screenshot_np = np.array(screenshot)
            screenshot_gray = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2GRAY)
            
            print(f"üìê Cubase Pro mute screenshot size: {screenshot.width}x{screenshot.height}")
            
            # Load mute template
            mute_template_path = config.TEMPLATE_PATHS['mute_music_template']
            template = cv2.imread(mute_template_path, cv2.IMREAD_GRAYSCALE)
            if template is None:
                print(f"‚ùå Kh√¥ng th·ªÉ load mute template: {mute_template_path}")
                return None, 0
            
            template_h, template_w = template.shape[:2]
            print(f"üìê Mute template size: {template_w}x{template_h}")
            
            # Adaptive template matching
            best_result = TemplateHelper.adaptive_template_match(screenshot_gray, template)
            
            print(f"üèÜ Mute best method: {best_result['method']}")
            print(f"üîç Mute confidence: {best_result['confidence']:.3f}")
            print(f"üìè Mute scale: {best_result['scale']:.2f}")
            
            # Save debug image
            debug_filename = "mute_music_adaptive_debug.png"
            
            if best_result['scale'] != 1.0:
                scaled_w, scaled_h = best_result['template_size']
                debug_template = cv2.resize(template, (scaled_w, scaled_h))
            else:
                debug_template = template
            
            debug_path = ImageHelper.save_template_debug_image(
                screenshot_np, debug_template, best_result['location'], 
                best_result['confidence'], debug_filename
            )
            print(f"üñº Mute adaptive debug saved -> {debug_path}")
            
            if best_result['confidence'] < config.TEMPLATE_MATCH_THRESHOLD:
                print(f"‚ùå Mute template not found. Confidence: {best_result['confidence']:.3f}")
                print(f"üí° Try adjusting Cubase layout or update mute template")
                return None, best_result['confidence']
            
            # T√≠nh to√°n v·ªã tr√≠ click (gi·ªØa template) - chuy·ªÉn ƒë·ªïi t·ª´ relative sang absolute coordinates
            scaled_w, scaled_h = best_result['template_size']
            click_x = x + best_result['location'][0] + scaled_w // 2
            click_y = y + best_result['location'][1] + scaled_h // 2
            
            print(f"‚úÖ Mute template found with confidence: {best_result['confidence']:.3f}")
            print(f"üéØ Mute click position: ({click_x}, {click_y}) [Scale: {best_result['scale']:.2f}]")
            
            return (click_x, click_y), best_result['confidence']
            
        except Exception as e:
            print(f"‚ùå Error finding mute template: {e}")
            return None, 0
    
    def _perform_mute_click(self, click_pos):
        """Th·ª±c hi·ªán click v√†o n√∫t mute."""
        try:
            click_x, click_y = click_pos
            
            # L∆∞u v·ªã tr√≠ chu·ªôt hi·ªán t·∫°i
            original_x, original_y = pyautogui.position()
            print(f"üíæ Saving mouse position: ({original_x}, {original_y})")
            
            print(f"üîá Clicking mute button: ({click_x}, {click_y})")
            
            # Click v√†o n√∫t mute
            MouseHelper.safe_click(click_x, click_y)
            time.sleep(0.2)
            
            # Tr·∫£ chu·ªôt v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu
            print(f"üîÑ Restoring mouse position to: ({original_x}, {original_y})")
            pyautogui.moveTo(original_x, original_y)
            
            print(f"‚úÖ Mute button clicked successfully")
            return True
            
        except Exception as e:
            print(f"‚ùå Error clicking mute button: {e}")
            return False

    def execute(self):
        """Abstract method t·ª´ BaseFeature - kh√¥ng s·ª≠ d·ª•ng cho volume detector."""
        print("üí° Volume detector s·ª≠ d·ª•ng GUI slider, kh√¥ng c·∫ßn execute tr·ª±c ti·∫øp")
        return True