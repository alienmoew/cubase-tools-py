"""
Auto-Tune Section Component - Bao g·ªìm tone detection, transpose, v√† music presets.
"""
import customtkinter as CTK
from gui.components.base_component import BaseComponent
from utils.debug_helper import DebugHelper


class AutoTuneSection(BaseComponent):
    """Component cho Auto-Tune section v·ªõi tone detection, transpose v√† music presets."""
    
    def __init__(self, parent, main_window):
        super().__init__(parent, main_window)
        
        # UI element references
        self.current_tone_label = None
        self.auto_detect_switch = None
        self.plugin_bypass_toggle = None
        self.plugin_state_label = None
        
        # Music presets references
        self.bolero_container = None
        self.bolero_level_label = None
        self.bolero_minus_btn = None
        self.bolero_plus_btn = None
        self.bolero_apply_circle = None
        self.nhac_tre_container = None
        self.nhac_tre_level_label = None
        self.nhac_tre_minus_btn = None
        self.nhac_tre_plus_btn = None
        self.nhac_tre_apply_circle = None
        
        # Track which preset is currently active
        self.active_music_preset = None
        
    def create(self):
        """T·∫°o Auto-Tune section v·ªõi t·∫•t c·∫£ controls."""
        # Section frame - minimal padding
        self.container = CTK.CTkFrame(self.parent, corner_radius=6, border_width=1, border_color="#404040")
        
        # Header v·ªõi title v√† toggle
        self._create_header()
        
        # Content frame - minimal
        content_frame = CTK.CTkFrame(self.container, fg_color="transparent")
        content_frame.pack(fill="both", expand=True, padx=4, pady=(0, 4))
        
        # Tone detection
        self._create_tone_detection(content_frame)
        
        # Music Presets
        self._create_music_presets(content_frame)
        
        return self.container
    
    def _create_header(self):
        """T·∫°o header v·ªõi title v√† bypass toggle."""
        header_frame = CTK.CTkFrame(self.container, fg_color="#1E1E1E", corner_radius=4)
        header_frame.pack(fill="x", padx=4, pady=4)
        
        # Title
        title_label = CTK.CTkLabel(
            header_frame,
            text="Auto-Tune",
            font=("Arial", 14, "bold"),
            text_color="#FFFFFF"
        )
        title_label.pack(side="left", padx=8, pady=4)
        
        # Auto-Tune Toggle (right side)
        toggle_container = CTK.CTkFrame(header_frame, fg_color="transparent")
        toggle_container.pack(side="right", padx=8)
        
        self.plugin_bypass_toggle = CTK.CTkSwitch(
            toggle_container,
            text="",
            command=lambda: self.main_window.bypass_manager.toggle_bypass('plugin'),
            width=35,
            height=18,
            fg_color="#666666",
            progress_color="#4CAF50"
        )
        self.plugin_bypass_toggle.pack(side="left", padx=(0, 5))
        
        self.plugin_state_label = CTK.CTkLabel(
            toggle_container,
            text="ON",
            font=("Arial", 9, "bold"),
            text_color="#4CAF50",
            width=25
        )
        self.plugin_state_label.pack(side="left")
    
    def _create_tone_detection(self, parent):
        """T·∫°o tone detection controls v·ªõi m√†u xanh l√°."""
        tone_row = CTK.CTkFrame(parent, fg_color="#1E1E1E", corner_radius=4, border_width=2, border_color="#4CAF50")
        tone_row.pack(fill="x", pady=2, padx=4)
        
        # Top row: Label + Key value
        top_row = CTK.CTkFrame(tone_row, fg_color="transparent")
        top_row.pack(fill="x", pady=(4, 2), padx=8)
        
        # Label ·ªü b√™n tr√°i v·ªõi d·∫•u hai ch·∫•m
        tone_title = CTK.CTkLabel(
            top_row,
            text="Tone hi·ªán t·∫°i:",
            font=("Arial", 11, "bold"),
            text_color="#81C784"
        )
        tone_title.pack(side="left", padx=(0, 4))
        
        # Gi√° tr·ªã Key ·ªü b√™n ph·∫£i label
        self.current_tone_label = CTK.CTkLabel(
            top_row,
            text="--",
            font=("Arial", 14, "bold"),
            text_color="#EF5350",
            width=50
        )
        self.current_tone_label.pack(side="left")
        
        # Bottom row: D√≤ tone button (left) + T·ª± ƒë·ªông d√≤ switch (right)
        bottom_row = CTK.CTkFrame(tone_row, fg_color="transparent")
        bottom_row.pack(fill="x", pady=(2, 4), padx=8)
        
        # D√≤ tone button ·ªü b√™n tr√°i
        btn_tone = CTK.CTkButton(
            bottom_row,
            text="D√≤ tone",
            font=("Arial", 11, "bold"),
            command=self._execute_tone_detector,
            width=80,
            height=26,
            fg_color="#388E3C",
            hover_color="#2E7D32"
        )
        btn_tone.pack(side="left", padx=0)
        
        # T·ª± ƒë·ªông d√≤ switch ·ªü b√™n ph·∫£i v·ªõi text
        self.auto_detect_switch = CTK.CTkSwitch(
            bottom_row,
            text="T·ª± ƒë·ªông d√≤",
            command=self._toggle_auto_detect,
            width=40,
            height=18,
            font=("Arial", 10),
            fg_color="#666666",
            progress_color="#4CAF50"
        )
        self.auto_detect_switch.pack(side="right", padx=0)
        
        saved_auto_detect = self.settings_manager.get_auto_detect()
        if saved_auto_detect:
            self.auto_detect_switch.select()
        
        if saved_auto_detect:
            DebugHelper.print_init_debug("üîÑ Auto-detect ƒë√£ ƒë∆∞·ª£c b·∫≠t t·ª´ l·∫ßn tr∆∞·ªõc")
            self.main_window.root.after_idle(lambda: self.main_window._start_auto_detect_from_saved_state())   
    
    def _create_music_presets(self, parent):
        """T·∫°o music presets controls v·ªõi b·ªë c·ª•c d·ªçc."""
        presets_frame = CTK.CTkFrame(parent, fg_color="#2B2B2B", corner_radius=4)
        presets_frame.pack(fill="x", pady=2, padx=4)
        
        # Bolero (Tr√™n)
        self._create_bolero_preset(presets_frame)
        
        # Nh·∫°c Tr·∫ª (D∆∞·ªõi)
        self._create_nhac_tre_preset(presets_frame)
        
        # Update initial display
        self._update_music_preset_display('bolero')
        self._update_music_preset_display('nhac_tre')
        # Reset highlight ban ƒë·∫ßu
        self._highlight_active_preset(None)
    
    def _create_preset_base(self, parent, preset_name, border_color, music_type):
        """H√†m t·∫°o preset c∆° b·∫£n ƒë·ªÉ t√°i s·ª≠ d·ª•ng code."""
        container = CTK.CTkFrame(parent, fg_color="#1E1E1E", corner_radius=4, border_width=2, border_color=border_color)
        container.pack(fill="x", pady=(0, 3), padx=6)
        
        # Bind click event ƒë·ªÉ apply preset khi click v√†o container
        container.bind("<Button-1>", lambda e: self._apply_preset_on_click(music_type))
        
        # Header frame v·ªõi title v√† level display
        header_frame = CTK.CTkFrame(container, fg_color="transparent")
        header_frame.pack(pady=(4, 2), padx=6, fill="x")
        
        # N√∫t apply preset v·ªõi t√™n preset (b√™n tr√°i)
        apply_circle = CTK.CTkButton(
            header_frame,
            text=preset_name,
            font=("Arial", 11, "bold"),
            command=lambda: self._apply_preset_on_click(music_type),
            width=70,
            height=26,
            corner_radius=6,
            fg_color="#303F9F",
            hover_color="#283593",
            border_width=0
        )
        apply_circle.pack(side="left")
        
        # Level display (b√™n ph·∫£i)
        level_label = CTK.CTkLabel(
            header_frame,
            text="0",
            font=("Arial", 10, "bold"),
            text_color="#9FA8DA",
            width=25
        )
        level_label.pack(side="right")
        
        # Button frame v·ªõi c√°c n√∫t ƒëi·ªÅu khi·ªÉn
        button_frame = CTK.CTkFrame(container, fg_color="transparent")
        button_frame.pack(pady=(0, 5), padx=6)
        
        # Gi·∫£m button
        minus_btn = CTK.CTkButton(
            button_frame,
            text="Gi·∫£m",
            font=("Arial", 10, "bold"),
            command=lambda: self._adjust_and_apply_preset(music_type, -1),
            width=45,
            height=24,
            fg_color="#303F9F",
            hover_color="#283593"
        )
        minus_btn.pack(side="left", padx=(0, 3))
        
        # B√¨nh th∆∞·ªùng button
        normal_btn = CTK.CTkButton(
            button_frame,
            text="B√¨nh th∆∞·ªùng",
            font=("Arial", 10, "bold"),
            command=lambda: self._reset_preset_level(music_type),
            width=75,
            height=24,
            fg_color="#303F9F",
            hover_color="#283593"
        )
        normal_btn.pack(side="left", padx=(0, 3))
        
        # TƒÉng button
        plus_btn = CTK.CTkButton(
            button_frame,
            text="TƒÉng",
            font=("Arial", 10, "bold"),
            command=lambda: self._adjust_and_apply_preset(music_type, 1),
            width=45,
            height=24,
            fg_color="#303F9F",
            hover_color="#283593"
        )
        plus_btn.pack(side="left")
        
        return container, level_label, minus_btn, normal_btn, plus_btn, apply_circle
    
    def _create_bolero_preset(self, parent):
        """T·∫°o Bolero preset controls v·ªõi m√†u h·ªìng."""
        self.bolero_container, self.bolero_level_label, self.bolero_minus_btn, self.bolero_normal_btn, self.bolero_plus_btn, self.bolero_apply_circle = self._create_preset_base(
            parent, "Bolero", "#E91E63", "bolero")
    
    def _create_nhac_tre_preset(self, parent):
        """T·∫°o Nh·∫°c Tr·∫ª preset controls v·ªõi m√†u xanh t√≠m/indigo."""
        self.nhac_tre_container, self.nhac_tre_level_label, self.nhac_tre_minus_btn, self.nhac_tre_normal_btn, self.nhac_tre_plus_btn, self.nhac_tre_apply_circle = self._create_preset_base(
            parent, "Nh·∫°c Tr·∫ª", "#3F51B5", "nhac_tre")
    
    # ==================== EVENT HANDLERS ====================
    def _reset_preset_level(self, music_type):
        """Reset preset level v·ªÅ 0 v√† √°p d·ª•ng l·∫°i."""
        # 1. ƒê·∫∑t l·∫°i level c·ªßa lo·∫°i nh·∫°c ƒë∆∞·ª£c ch·ªçn v·ªÅ 0
        self.main_window.music_presets_manager.current_levels[music_type] = 0
        
        # 2. C·∫≠p nh·∫≠t l·∫°i giao di·ªán ƒë·ªÉ hi·ªÉn th·ªã level "0"
        self._update_music_preset_display(music_type)
        
        # 3. √Åp d·ª•ng preset ·ªü level 0 (level "B√¨nh th∆∞·ªùng")
        self._apply_preset_on_click(music_type)
    
    def _execute_tone_detector(self):
        """Execute tone detector."""
        self.main_window._execute_tone_detector()
    
    def _toggle_auto_detect(self):
        """Toggle auto-detect."""
        self.main_window._toggle_auto_detect()
    
    def _adjust_music_preset(self, music_type, direction):
        """ƒêi·ªÅu ch·ªânh music preset level."""
        self.main_window._adjust_music_preset(music_type, direction)
    
    def _apply_music_preset(self, music_type):
        """√Åp d·ª•ng music preset."""
        # Highlight preset ƒëang ƒë∆∞·ª£c apply
        self._highlight_active_preset(music_type)
        self.main_window._apply_music_preset(music_type)
    
    def _highlight_active_preset(self, active_preset):
        """Highlight preset ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·∫±ng c√°ch thay ƒë·ªïi m√†u border v√† n√∫t."""
        self.active_music_preset = active_preset
        
        # M√†u cho Bolero (h·ªìng)
        bolero_default_border = "#E91E63"
        bolero_active_border = "#F48FB1"  # H·ªìng s√°ng
        bolero_default_btn = "#303F9F"
        bolero_active_btn = "#F48FB1"
        
        # M√†u cho Nh·∫°c Tr·∫ª (xanh t√≠m/indigo)
        nhac_tre_default_border = "#3F51B5"
        nhac_tre_active_border = "#7986CB"  # Xanh t√≠m s√°ng
        nhac_tre_default_btn = "#303F9F"
        nhac_tre_active_btn = "#7986CB"
        
        if active_preset == 'bolero':
            if self.bolero_container:
                self.bolero_container.configure(border_color=bolero_active_border)
            if self.bolero_apply_circle:
                self.bolero_apply_circle.configure(fg_color=bolero_active_btn)
            if self.nhac_tre_container:
                self.nhac_tre_container.configure(border_color=nhac_tre_default_border)
            if self.nhac_tre_apply_circle:
                self.nhac_tre_apply_circle.configure(fg_color=nhac_tre_default_btn)
        elif active_preset == 'nhac_tre':
            if self.bolero_container:
                self.bolero_container.configure(border_color=bolero_default_border)
            if self.bolero_apply_circle:
                self.bolero_apply_circle.configure(fg_color=bolero_default_btn)
            if self.nhac_tre_container:
                self.nhac_tre_container.configure(border_color=nhac_tre_active_border)
            if self.nhac_tre_apply_circle:
                self.nhac_tre_apply_circle.configure(fg_color=nhac_tre_active_btn)
        else:
            # Reset c·∫£ hai v·ªÅ m√†u default
            if self.bolero_container:
                self.bolero_container.configure(border_color=bolero_default_border)
            if self.bolero_apply_circle:
                self.bolero_apply_circle.configure(fg_color=bolero_default_btn)
            if self.nhac_tre_container:
                self.nhac_tre_container.configure(border_color=nhac_tre_default_border)
            if self.nhac_tre_apply_circle:
                self.nhac_tre_apply_circle.configure(fg_color=nhac_tre_default_btn)
    
    def _adjust_and_apply_preset(self, music_type, direction):
        """ƒêi·ªÅu ch·ªânh v√† t·ª± ƒë·ªông apply preset ngay l·∫≠p t·ª©c."""
        # B∆∞·ªõc 1: ƒêi·ªÅu ch·ªânh level
        self.main_window._adjust_music_preset(music_type, direction)
        
        # B∆∞·ªõc 2: Apply preset lu√¥n
        self._highlight_active_preset(music_type)
        self.main_window._apply_music_preset(music_type)
    
    def _apply_preset_on_click(self, music_type):
        """Apply preset hi·ªán t·∫°i khi click v√†o container."""
        # N·∫øu preset n√†y ƒëang active r·ªìi th√¨ kh√¥ng l√†m g√¨
        if self.active_music_preset == music_type:
            return
        
        # Highlight preset n√†y l√† active
        self._highlight_active_preset(music_type)
        
        # Apply preset v·ªõi level hi·ªán t·∫°i
        self.main_window._apply_music_preset(music_type)
    
    def _update_music_preset_display(self, music_type):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã music preset level."""
        try:
            music_presets_manager = self.main_window.music_presets_manager
            current_level = music_presets_manager.get_current_level(music_type)
            level_str = music_presets_manager.get_level_string(current_level)
            
            display_text = str(level_str)
            
            if music_type == 'bolero' and self.bolero_level_label:
                self.bolero_level_label.configure(text=display_text)
            elif music_type == 'nhac_tre' and self.nhac_tre_level_label:
                self.nhac_tre_level_label.configure(text=display_text)
                
        except Exception as e:
            print(f"‚ùå Error updating {music_type} display: {e}")
    
    def update_current_tone(self, tone_text):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã tone hi·ªán t·∫°i."""
        if self.current_tone_label:
            self.current_tone_label.configure(text=tone_text)
            